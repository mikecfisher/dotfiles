# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n]
# confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

### Zinit initialization - moved to top
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

[[ ! -d ~/.cache/zinit/completions ]] && mkdir -p ~/.cache/zinit/completions
# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust
### End of Zinit's initialization

# Add deno completions to search path
if [[ ":$FPATH:" != *":/Users/mike/completions:"* ]]; then export FPATH="/Users/mike/completions:$FPATH"; fi

# Add custom completions directory to fpath
fpath=(~/.zsh/completions $fpath)

# Initialize completion system
autoload -Uz compinit
compinit

# --- ZINIT PLUGINS AND THEME ---
# Load Powerlevel10k theme
zinit ice depth=1
zinit light romkatv/powerlevel10k

# Zinit plugins
zinit light zsh-users/zsh-autosuggestions
zinit light zsh-users/zsh-history-substring-search
zinit light zdharma-continuum/fast-syntax-highlighting

# Git tools
zinit light wfxr/forgit

# Developer tools
zinit light lukechilds/zsh-better-npm-completion
zinit light g-plane/zsh-yarn-autocompletions

# System utilities
zinit light ael-code/zsh-colored-man-pages
zinit light hcgraf/zsh-sudo

# Keep essential OMZ plugins

zinit ice as"completion"
zinit snippet https://github.com/Homebrew/brew/blob/master/completions/zsh/_brew

# --- ALIASES ---
alias python=python3
alias editor=vim
alias venv="uv venv"
alias pipx="uv tool run"
alias pipi="uv tool install"
# Copy current directory path to clipboard
alias pwdc='pwd | tr -d "\n" | pbcopy && echo "Path copied to clipboard"'
# expo tweaks
alias expo='nocorrect expo'

# --- ENVIRONMENT VARIABLES ---
export LDFLAGS="-L/opt/homebrew/opt/ruby/lib"
export CPPFLAGS="-I/opt/homebrew/opt/ruby/include"
# Base SDK path - tells Android tools where to find the SDK installation
export ANDROID_HOME=$HOME/Library/Android/sdk
export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk
export BUN_INSTALL="$HOME/.bun"
export PNPM_HOME="$HOME/.local/share/pnpm"
export NODE_OPTIONS="--no-deprecation"

# --- CUSTOM FUNCTIONS ---
# Copy file contents to clipboard
function copyfile() {
  cat "$1" | pbcopy
  echo "Contents of $1 copied to clipboard"
}

# 1Password session management
function op_signin() {
  # Check if we have a valid session
  if ! op account get --format=json >/dev/null 2>&1; then
    echo "Signing in to 1Password..."
    eval $(op signin)
  fi
}

# Function to get OpenAI API key from 1Password
function get_openai_api_key() {
  op_signin
  # Using 1Password CLI to fetch the key
  op item get "OpenAI API Key" --fields credential --reveal
}

# Function to get Home Assistant token from 1Password
function get_homeassistant_token() {
  op_signin
  op item get "Home Assistant Token" --fields credential --reveal
}

# Set the OPENAI_API_KEY environment variable
export OPENAI_API_KEY=$(get_openai_api_key)

# Home Assistant CLI
export HASS_SERVER=http://homeassistant.local:8123
export HASS_TOKEN=$(get_homeassistant_token)

# --- PATH SETUP ---
path=(
    # User-specific binaries and scripts
    $HOME/.local/bin
    $HOME/bin

    # Node.js and package managers
    $HOME/.nodenv/versions/18.11.0/bin
    $HOME/.yarn/bin
    $HOME/.config/yarn/global/node_modules/.bin
    $PNPM_HOME
    $BUN_INSTALL/bin

    # Ruby and RubyGems executables from Homebrew
    /opt/homebrew/opt/ruby/bin
    /opt/homebrew/lib/ruby/gems/3.0.0/bin

    # Python 3.12 system-level binaries
    /Library/Frameworks/Python.framework/Versions/3.12/bin
    # Python user-level binaries (pip installed packages)
    $HOME/Library/Python/3.12/bin

    # Android SDK tools order matters
    $ANDROID_HOME/cmdline-tools/latest/bin
    $ANDROID_HOME/emulator
    $ANDROID_HOME/platform-tools

    # LM Studio CLI
    $HOME/.lmstudio/bin

    # Existing system PATH
    $path
)
typeset -U path  # Remove duplicates

# --- HISTORY SETTINGS ---
HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000
setopt SHARE_HISTORY
setopt HIST_IGNORE_ALL_DUPS

# --- AUTOCOMPLETIONS AND TOOL INITIALIZATION ---
# EAS CLI autocompletion
EAS_AC_ZSH_SETUP_PATH=/Users/mike/Library/Caches/eas-cli/autocomplete/zsh_setup && test -f $EAS_AC_ZSH_SETUP_PATH && source $EAS_AC_ZSH_SETUP_PATH;

# Bun autocompletion
[ -s "/Users/mike/.bun/_bun" ] && source "/Users/mike/.bun/_bun"

# Zoxide initialization - removed the duplicate entry
eval "$(zoxide init --cmd cd zsh)"

# 1Password autocompletion
eval "$(op completion zsh)"; compdef _op op

# FZF key bindings and fuzzy completion
[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# --- NVM SETUP ---
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# Autoload NVM per project
autoload -U add-zsh-hook

load-nvmrc() {
  local nvmrc_path
  nvmrc_path="$(nvm_find_nvmrc)"

  if [ -n "$nvmrc_path" ]; then
    local nvmrc_node_version
    nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

    if [ "$nvmrc_node_version" = "N/A" ]; then
      nvm install
    elif [ "$nvmrc_node_version" != "$(nvm version)" ]; then
      nvm use
    fi
  elif [ -n "$(PWD=$OLDPWD nvm_find_nvmrc)" ] && [ "$(nvm version)" != "$(nvm version default)" ]; then
    echo "Reverting to nvm default version"
    nvm use default
  fi
}




add-zsh-hook chpwd load-nvmrc
load-nvmrc

# --- POWERLEVEL10K CONFIGURATION ---
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# --- LANGUAGE VERSION MANAGERS (ALWAYS AT END) ---
#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"

# Deno environment
. "/Users/mike/.deno/env"
