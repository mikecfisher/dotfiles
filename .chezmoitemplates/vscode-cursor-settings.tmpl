{{- $app := "cursor" -}}
{{- if eq .chezmoi.targetFile (joinPath .chezmoi.homeDir "Library/Application Support/Code/User/settings.json") -}}
{{-   $app = "vscode" -}}
{{- end -}}
{

  // ===== Editor Core Settings =====
  "editor.tabSize": 2,
  "editor.smoothScrolling": true,
  "editor.tabCompletion": "on",
  "editor.fontSize": 16,
  "editor.fontFamily": "JetBrains Mono",
  "editor.fontLigatures": true,
  "editor.lineNumbers": "relative",
  "editor.fontWeight": "normal",
  "editor.formatOnSave": true,
  "editor.gotoLocation.multipleDefinitions": "goto",
  "editor.renderControlCharacters": false,
  "editor.suggestSelection": "first",
  "editor.inlineSuggest.enabled": true,
  "editor.minimap.enabled": false,
  "editor.renderWhitespace": "all",
  "editor.stickyScroll.enabled": true,
  "editor.accessibilitySupport": "off",
  "editor.guides.indentation": true,
  "editor.guides.bracketPairs": "active",
  "editor.guides.bracketPairsHorizontal": "active",
  "editor.guides.highlightActiveIndentation": true,
  "editor.bracketPairColorization.enabled": true,
  "editor.linkedEditing": true,
  "editor.wordWrap": "on",
  "telemetry.telemetryLevel": "off",




  // ===== Workbench Theme and Appearance =====
  "workbench.colorTheme": {{ if eq $app "vscode" }}"GitHub Dark"{{ else }}"Palenight (Mild Contrast)"{{ end }},
  "workbench.iconTheme": "material-icon-theme",
  "workbench.colorCustomizations": {
    "statusBar.background": {{ if eq $app "vscode" }}"#5f00af"{{ else }}"#005f5f"{{ end }},
    "statusBar.noFolderBackground": {{ if eq $app "vscode" }}"#5f00af"{{ else }}"#005f5f"{{ end }},
    "statusBar.debuggingBackground": {{ if eq $app "vscode" }}"#5f00af"{{ else }}"#005f5f"{{ end }},
    "statusBar.foreground": "#ffffff",
    "statusBar.debuggingForeground": "#ffffff"
  },

  // ===== Terminal Configuration =====
  "terminal.integrated.fontSize": 14,
  "terminal.integrated.fontFamily": {{ if eq $app "vscode" }}"FuraCode NF"{{ else }}"Hack, 'JetBrains Mono', Menlo, Monaco, 'Courier New', monospace"{{ end }},
  "terminal.integrated.scrollback": 5000,
  "terminal.integrated.enableMultiLinePasteWarning": "never",
  "terminal.external.osxExec": "Ghostty.app",

  // ===== Language Settings =====
  "typescript.updateImportsOnFileMove.enabled": "always",
  "javascript.updateImportsOnFileMove.enabled": "always",
  "typescript.suggest.autoImports": true,
  "typescript.suggest.enabled": true,
  "typescript.suggestionActions.enabled": true,
  "typescript.enablePromptUseWorkspaceTsdk": true,
  "totalTypeScript.hideAllTips": false,
  "totalTypeScript.hideBasicTips": true,

  // ===== Python Configuration =====
  "python.defaultInterpreterPath": "/Library/Frameworks/Python.framework/Versions/3.12/bin/python3",

  // ===== Code Runner Configuration =====
  "code-runner.runInTerminal": true,
  "code-runner.executorMap": {
    "typescript": "bun $fullFileName",
    "python": "python3"
  },

  // ===== Language-Specific Formatting =====
  "emmet.includeLanguages": {
    "javascript": "javascriptreact",
    "typescript": "typescriptreact"
  },
  "[javascript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true,
    "typescript.suggest.enabled": true
  },
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true,
    "typescript.suggest.enabled": true
  },
  "[json]": {
    "editor.defaultFormatter": "vscode.json-language-features"
  },
  "[javascriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true,
    "typescript.suggest.enabled": true
  },
  "[typescriptreact]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode",
    "editor.formatOnSave": true,
    "typescript.suggest.enabled": true
  },
  "[jsonc]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[mjml]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "[html]": {
    "editor.defaultFormatter": "vscode.html-language-features"
  },
  "[css]": {
    "editor.defaultFormatter": "vscode.css-language-features"
  },
  "[python]": {
    "editor.tabSize": 4,
    "editor.formatOnType": true
  },
  "[java]": {
    "editor.suggest.snippetsPreventQuickSuggestions": false
  },

  // ===== Git Configuration =====
  "git.autofetch": true,
  "git.confirmSync": false,
  "githubPullRequests.pushBranch": "always",
  "githubPullRequests.fileListLayout": "flat",
  "githubPullRequests.pullBranch": "never",

  // ===== Explorer Configuration =====
  "explorer.autoReveal": false,
  "explorer.confirmDragAndDrop": false,
  "explorer.confirmDelete": false,
  "explorer.fileNesting.patterns": {
    "*.ts": "${capture}.js",
    "*.js": "${capture}.js.map, ${capture}.min.js, ${capture}.d.ts",
    "*.jsx": "${capture}.js",
    "*.tsx": "${capture}.ts",
    "tsconfig.json": "tsconfig.*.json",
    "package.json": "package-lock.json, yarn.lock, pnpm-lock.yaml"
  },

  // ===== File Management =====
  "files.trimTrailingWhitespace": true,
  "files.exclude": {
    "yarn.lock": true
  },
  "files.associations": {
    "*.json.tmpl": "jsonc"
  },

  // ===== Search Configuration =====
  "search.useParentIgnoreFiles": true,
  "search.useGlobalIgnoreFiles": true,
  "search.exclude": {
    "**/.expo": true,
    "**/.git": true,
    "**/**/node_modules": true,
    "**/coverage": true,
    "node_modules": true
  },

  // ===== ESLint Configuration =====
  "eslint.workingDirectories": [
    { "mode": "auto" }
  ],
  "eslint.format.enable": true,
  "eslint.validate": [
    "javascript",
    "javascriptreact",
    "typescript",
    "typescriptreact"
  ],
  "eslint.debug": true,
  "eslint.codeActionsOnSave.rules": null,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "always"
  },

  // ===== Prettier Configuration =====
  "prettier.requireConfig": true,

  // ===== Vim Configuration =====
  "vim.autoindent": true, // Automatically indents new lines to match the previous line's indentation
  "vim.leader": "<Space>", // Sets the leader key to Space (used for custom key mappings)
  "vim.hlsearch": true, // Highlights all matches when searching
  "vim.easymotion": true, // Enables EasyMotion plugin for quick cursor movement
  "vim.camelCaseMotion.enable": true, // Enables navigation within camelCase words (w/b/e treat camelCase as separate words)
  "vim.useSystemClipboard": true, // Uses system clipboard for yank/paste operations
  "vim.incsearch": true, // Shows search matches as you type (incremental search)
  "vim.useCtrlKeys": true, // Enables Ctrl key combinations for Vim commands
  "vim.ignorecase": true, // Makes searches case-insensitive
  "vim.smartcase": true, // Makes searches case-sensitive when using uppercase letters
  "vim.highlightedyank.enable": true, // Briefly highlights yanked (copied) text
  "vim.normalModeKeyBindingsNonRecursive": [
    // Disable ctrl+O as it conflicts with karabiner
    {
      "before": [
        "<C-o>"
      ],
      "after": [] // Disables Ctrl+O in normal mode
    },
    {
      "before": [
        "<C-t>"
      ],
      "after": [] // Disables Ctrl+T in normal mode
    },
    {
      "before": [
        "<C-b>"
      ],
      "after": [] // Disables Ctrl+B in normal mode
    },
    // LazyVim-style buffer navigation
    {
      "before": [
        "H"
      ],
      "commands": [
        ":bprevious"
      ]
    },
    {
      "before": [
        "L"
      ],
      "commands": [
        ":bnext"
      ]
    },
    // LazyVim-style window navigation
    {
      "before": [
        "<C-h>"
      ],
      "commands": [
        "workbench.action.navigateLeft"
      ]
    },
    {
      "before": [
        "<C-j>"
      ],
      "commands": [
        "workbench.action.navigateDown"
      ]
    },
    {
      "before": [
        "<C-k>"
      ],
      "commands": [
        "workbench.action.navigateUp"
      ]
    },
    {
      "before": [
        "<C-l>"
      ],
      "commands": [
        "workbench.action.navigateRight"
      ]
    },
    // LazyVim-style window resizing
    {
      "before": [
        "<C-Up>"
      ],
      "commands": [
        "workbench.action.increaseViewHeight"
      ]
    },
    {
      "before": [
        "<C-Down>"
      ],
      "commands": [
        "workbench.action.decreaseViewHeight"
      ]
    },
    {
      "before": [
        "<C-Left>"
      ],
      "commands": [
        "workbench.action.decreaseViewWidth"
      ]
    },
    {
      "before": [
        "<C-Right>"
      ],
      "commands": [
        "workbench.action.increaseViewWidth"
      ]
    },
    // LazyVim-style split management
    {
      "before": [
        "<leader>",
        "w",
        "s"
      ],
      "commands": [
        "workbench.action.splitEditorDown"
      ]
    },
    {
      "before": [
        "<leader>",
        "w",
        "v"
      ],
      "commands": [
        "workbench.action.splitEditorRight"
      ]
    },
    {
      "before": [
        "<leader>",
        "w",
        "l"
      ],
      "commands": [
        "workbench.action.splitEditorRight"
      ]
    },
    {
      "before": [
        "<leader>",
        "w",
        "h"
      ],
      "commands": [
        "workbench.action.splitEditorLeft"
      ]
    },
    {
      "before": [
        "<leader>",
        "w",
        "j"
      ],
      "commands": [
        "workbench.action.splitEditorDown"
      ]
    },
    {
      "before": [
        "<leader>",
        "w",
        "k"
      ],
      "commands": [
        "workbench.action.splitEditorUp"
      ]
    },
    // Debugging commands (original ;d mappings)
    {
      "before": ["<leader>", "d", "b"],
      "command": "editor.debug.action.toggleBreakpoint",
      "when": "editorTextFocus"
    },
    {
      "before": ["<leader>", "d", "c"],
      "command": "workbench.action.debug.continue",
      "when": "inDebugMode"
    },
    {
      "before": ["<leader>", "d", "C"],
      "command": "workbench.action.debug.run",
      "when": "debuggersAvailable"
    },
    {
      "before": ["<leader>", "d", "o"],
      "command": "workbench.action.debug.stepOver",
      "when": "inDebugMode"
    },
    {
      "before": ["<leader>", "d", "i"],
      "command": "workbench.action.debug.stepInto",
      "when": "inDebugMode"
    },
    {
      "before": ["<leader>", "d", "O"],
      "command": "workbench.action.debug.stepOut",
      "when": "inDebugMode"
    },
    {
      "before": ["<leader>", "d", "x"],
      "command": "workbench.action.debug.stop",
      "when": "inDebugMode"
    },
    // LazyVim-style buffer management
    {
      "before": [
        "<leader>",
        "b",
        "d"
      ],
      "commands": [
        "workbench.action.closeActiveEditor"
      ]
    },
    // LazyVim-style diagnostics navigation
    {
      "before": [
        "]",
        "d"
      ],
      "commands": [
        "editor.action.marker.next"
      ]
    },
    {
      "before": [
        "[",
        "d"
      ],
      "commands": [
        "editor.action.marker.prev"
      ]
    },
    {
      "before": [
        "<leader>",
        "c",
        "d"
      ],
      "commands": [
        "editor.action.showHover"
      ]
    },
    {
      "before": [
        "<leader>",
        "x",
        "d"
      ],
      "commands": [
        "workbench.actions.view.problems"
      ]
    },
    {
      "before": [
        "<leader>",
        "x",
        "w"
      ],
      "commands": [
        "workbench.actions.view.problems"
      ]
    },
    // LazyVim-style file explorer
    {
      "before": [
        "<leader>",
        "e"
      ],
      "commands": [
        "workbench.view.explorer"
      ]
    },
    {
      "before": [
        "<leader>",
        "E"
      ],
      "commands": [
        "workbench.view.explorer",
        "workbench.action.focusSideBar"
      ]
    },
    {
      "before": [
        "<leader>",
        "f",
        "e"
      ],
      "commands": [
        "workbench.action.toggleSidebarVisibility"
      ]
    },
    // Comment functionality
    {
      "before": ["g", "c", "c"],
      "commands": ["editor.action.commentLine"]
    },
    {
      "before": ["g", "c"],
      "commands": ["editor.action.commentLine"]
    },
    // LazyVim-style search commands
    {
      "before": [
        "<leader>",
        "/"
      ],
      "commands": [
        "actions.find"
      ]
    },

    {
      "before": [
        "<leader>",
        "s",
        "g"
      ],
      "commands": [
        "workbench.action.findInFiles"
      ]
    },
    {
      "before": [
        "<leader>",
        "s",
        "G"
      ],
      "commands": [
        "workbench.action.findInFiles"
      ]
    },
    {
      "before": [
        "<leader>",
        "s",
        "s"
      ],
      "commands": [
        "workbench.action.gotoSymbol"
      ]
    },
    {
      "before": [
        "<leader>",
        "s",
        "w"
      ],
      "commands": [
        "editor.action.addSelectionToNextFindMatch"
      ]
    },
    // LazyVim-style telescope/find
    {
      "before": [
        "<leader>",
        "f",
        "f"
      ],
      "commands": [
        "workbench.action.quickOpen"
      ]
    },
    {
      "before": [
        "<leader>",
        "f",
        "F"
      ],
      "commands": [
        "workbench.action.quickOpen"
      ]
    },
    {
      "before": [
        "<leader>",
        "f",
        "r"
      ],
      "commands": [
        "workbench.action.openRecent"
      ]
    },
    {
      "before": [
        "<leader>",
        "f",
        "b"
      ],
      "commands": [
        "workbench.action.showAllEditorsByMostRecentlyUsed"
      ]
    },
    // LazyVim-style terminal
    {
      "before": [
        "<leader>",
        "f",
        "t"
      ],
      "commands": [
        "workbench.action.terminal.toggleTerminal"
      ]
    },
    {
      "before": [
        "<leader>",
        "f",
        "T"
      ],
      "commands": [
        "workbench.action.terminal.new"
      ]
    },
    // LazyVim-style git commands
    {
      "before": [
        "<leader>",
        "g",
        "g"
      ],
      "commands": [
        "workbench.view.scm"
      ]
    },
    // { "before": ["S-h"], "commands": [":bprevious"] }, // Shift+H to go to previous buffer
    // { "before": ["S-l"], "commands": [":bnext"] },     // Shift+L to go to next buffer
    {
      "before": [
        "<Leader>",
        "t",
        "t"
      ],
      "commands": [
        ":tabnew"
      ]
    }, // Space+t+t to create new tab
    {
      "before": [
        "<Leader>",
        "t",
        "n"
      ],
      "commands": [
        ":tabnext"
      ]
    }, // Space+t+n to go to next tab
    {
      "before": [
        "<Leader>",
        "t",
        "p"
      ],
      "commands": [
        ":tabprev"
      ]
    }, // Space+t+p to go to previous tab
    {
      "before": [
        "<Leader>",
        "t",
        "o"
      ],
      "commands": [
        ":tabo"
      ]
    }, // Space+t+o to close all other tabs
    // Quick file navigation (inspired by CtrlP/FZF plugins in Vim)
    {
      "before": [
        "leader",
        "leader"
      ],
      "commands": [
        "workbench.action.quickOpen"
      ] // Space+Space to open quick file finder
    },
    // Search across all files (similar to Ag/Ack/Ripgrep in Vim)
    {
      "before": [
        "leader",
        "g",
        "s"
      ],
      "commands": [
        "workbench.action.findInFiles"
      ] // Space+g+s to search in all files
    },
    // Quick access to file explorer
    {
      "before": [
        "leader",
        "g",
        "e"
      ],
      "commands": [
        "workbench.view.explorer"
      ] // Space+g+e to open file explorer
    },
    {
      "before": [
        ":"
      ],
      "commands": [
        "workbench.action.showCommands", // : to open command palette
      ],
      "silent": true
    },
    {
      "before": [
        "leader",
        "v"
      ],
      "commands": [
        ":vsplit"
      ]
    }, // Space+v to create vertical split
    {
      "before": [
        "leader",
        "s"
      ],
      "commands": [
        ":split"
      ]
    }, // Space+s to create horizontal split
    // { "before": ["leader", "h"], "commands": ["workbench.action.focusLeftGroup"] },
    // { "before": ["leader", "j"], "commands": ["workbench.action.focusBelowGroup"] },
    // { "before": ["leader", "k"], "commands": ["workbench.action.focusAboveGroup"] },
    // { "before": ["leader", "l"], "commands": ["workbench.action.focusRightGroup"] },
    {
      "before": [
        "leader",
        "c",
        "a"
      ],
      "commands": [
        "editor.action.codeAction"
      ], // Space+c+a to show code actions
    },
    {
      "before": [
        "leader",
        "c",
        "s"
      ],
      "commands": [
        "workbench.action.gotoSymbol"
      ] // Space+c+s to go to symbol in file
    },
    {
      "before": [
        "leader",
        "c",
        "h"
      ],
      "commands": [
        "composer.showComposerChatHistory"
      ]
    },
    // Jump to definition (emulates gd in Vim)
    {
      "before": [
        "leader",
        "g",
        "d"
      ],
      "commands": [
        "editor.action.revealDefinition"
      ] // Space+g+d to go to definition
    },
    // View all references to current symbol (equivalent to gr in Vim with LSP)
    {
      "before": [
        "leader",
        "g",
        "r"
      ],
      "commands": [
        "editor.action.goToReferences"
      ] // Space+g+r to find all references
    },
    // Quick access to file explorer
    {
      "before": [
        "leader",
        "e"
      ],
      "commands": [
        "workbench.view.explorer"
      ] // Space+e to open file explorer
    },
    // Close current editor (buffer delete in Vim terminology)
    {
      "before": [
        "<Leader>",
        "b",
        "d"
      ],
      "commands": [
        "workbench.action.closeActiveEditor"
      ] // Space+b+d to close current editor
    },
    // Quick file navigation (inspired by CtrlP/FZF plugins in Vim)
    {
      "before": [
        "<Leader>",
        "<Leader>"
      ],
      "commands": [
        "workbench.action.showAllEditors"
      ] // Space+Space to show all open editors
    },
    // Show all open editors
    {
      "before": [
        "leader",
        "leader"
      ],
      "commands": [
        "workbench.action.quickOpen"
      ] // space space to open quick file finder
    },
    {
      "before": [
        "leader",
        "c",
        "s"
      ],
      "commands": [
        "workbench.action.gotoSymbol"
      ] // Space+c+s to go to symbol in file (duplicate)
    },
    // Quick access to source control view
    {
      "before": [
        "leader",
        "g",
        "g"
      ],
      "commands": [
        "workbench.view.scm"
      ] // Space+g+g to open source control view (duplicate)
    },
    // Quick access to file explorer
    {
      "before": [
        "leader",
        "g",
        "e"
      ],
      "commands": [
        "workbench.view.explorer"
      ] // Space+g+e to open file explorer (duplicate)
    },
    {
      "before": [
        "leader",
        "j"
      ],
      "after": [
        "J"
      ] // Space+j to join lines (equivalent to J in vim)
    },
    {
      "before": [
        "<C-h>"
      ],
      "after": [
        "<C-w>",
        "h"
      ] // Ctrl+h to navigate to the left split
    },
    {
      "before": [
        "<C-j>"
      ],
      "after": [
        "<C-w>",
        "j"
      ] // Ctrl+j to navigate to the split below
    },
    {
      "before": [
        "<C-k>"
      ],
      "after": [
        "<C-w>",
        "k"
      ] // Ctrl+k to navigate to the split above
    },
    {
      "before": [
        "<C-l>"
      ],
      "after": [
        "<C-w>",
        "l"
      ] // Ctrl+l to navigate to the right split
    }
  ],
  "vim.insertModeKeyBindings": [
    {
      "before": [
        "j",
        "j"
      ],
      "after": [
        "<Esc>"
      ]
    } // jj in insert mode to escape to normal mode
  ],
  "vim.visualModeKeyBindingsNonRecursive": [
    // LazyVim-style indentation
    {
      "before": [
        ">"
      ],
      "commands": [
        "editor.action.indentLines"
      ]
    },
    {
      "before": [
        "<"
      ],
      "commands": [
        "editor.action.outdentLines"
      ]
    },
    // LazyVim-style move lines
    {
      "before": [
        "J"
      ],
      "commands": [
        "editor.action.moveLinesDownAction"
      ]
    },
    {
      "before": [
        "K"
      ],
      "commands": [
        "editor.action.moveLinesUpAction"
      ]
    },
    // LazyVim-style search for selected text
    {
      "before": [
        "<leader>",
        "s",
        "g"
      ],
      "commands": [
        "editor.action.addSelectionToNextFindMatch",
        "workbench.action.findInFiles"
      ]
    }
  ],
  "vim.handleKeys": {
    "<C-d>": true,
    "<C-u>": true,
    "<C-f>": false, // Let VS Code handle find
    "<C-h>": true,
    "<C-j>": true,
    "<C-k>": true,
    "<C-l>": true,
  },
  // ===== Material Icon Theme =====
  "material-icon-theme.activeIconPack": "react_redux",
  "material-icon-theme.folders.theme": "specific",

  // ===== Home Assistant =====
  "vscode-home-assistant.hostUrl": "http://homeassistant.local:8123",
  "vscode-home-assistant.longLivedAccessToken": "{{ onepasswordRead "op://Private/Home Assistant Long Lived Access Key/credential" }}",

  // ===== Common Miscellaneous Settings =====
  "window.zoomLevel": 1,
  "diffEditor.codeLens": true,
  "extensions.ignoreRecommendations": false,
  "zenMode.centerLayout": false,
  "prisma.showPrismaDataPlatformNotification": false,
  "security.workspace.trust.untrustedFiles": "open",
  "vsintellicode.modify.editor.suggestSelection": "automaticallyOverrodeDefaultValue",
  "lldb.suppressUpdateNotifications": true,
  "vsicons.dontShowNewVersionMessage": true,
  "react-native-tools.showUserTips": false,

  {{ if eq $app "vscode" }}
  // ===== VS Code Specific Settings =====
  "github.copilot.enable": {
    "*": true,
    "plaintext": true,
    "markdown": true,
    "scminput": false,
    "yaml": true
  },
  "github.copilot.editor.enableAutoCompletions": true,
  "github.copilot.chat.scopeSelection": true,
  "github.copilot.chat.generateTests.codeLens": true,
  "githubPullRequests.experimental.chat": true,
  "githubPullRequests.experimental.notificationsView": true,
  "githubPullRequests.pullRequestDescription": "Copilot",
  "chat.detectParticipant.enabled": true,
  "github.copilot.chat.editor.temporalContext.enabled": true,
  "graphql-config": {
    "path": "./.graphqlrc"
  },
  "peacock.favoriteColors": [
    { "name": "Angular Red", "value": "#b52e31" },
    { "name": "Auth0 Orange", "value": "#eb5424" },
    { "name": "Azure Blue", "value": "#007fff" },
    { "name": "C# Purple", "value": "#68217A" },
    { "name": "Gatsby Purple", "value": "#639" },
    { "name": "Go Cyan", "value": "#5dc9e2" },
    { "name": "Java Blue-Gray", "value": "#557c9b" },
    { "name": "JavaScript Yellow", "value": "#f9e64f" },
    { "name": "Mandalorian Blue", "value": "#1857a4" },
    { "name": "Node Green", "value": "#215732" },
    { "name": "React Blue", "value": "#00b3e6" },
    { "name": "Something Different", "value": "#832561" },
    { "name": "Vue Green", "value": "#42b883" }
  ],
  {{ end }}

  {{ if eq $app "cursor" }}
  // ===== Cursor Specific Settings =====
  "cursor.cpp.disabledLanguages": [
    "scminput",
    "untitled"
  ],
  "cursor.cpp.enablePartialAccepts": true,
  "cursor.general.gitGraphIndexing": "enabled",
  "cursor.cmdk.useThemedDiffBackground": true,
  "cursor.diffs.useCharacterLevelDiffs": true,
  {{ end }}

   // ===== Remote Development =====
  "remote.SSH.remotePlatform": {
    "homeassistant": "linux"
  },
  "remote.SSH.useLocalServer": false,
  "remote.SSH.showLoginTerminal": true,
  "remote.SSH.path": "/usr/bin/ssh",
  "remote.SSH.enableRemoteCommand": true,
  "remote.SSH.serverInstallPath": {
    "homeassistant": "/root/.cursor-server"
  },
  "remote.SSH.localServerDownload": "off",
  "remote.SSH.permitPtyAllocation": true,

  "xml.server.binary.trustedHashes": [
    "8080595d4aee6c70818be8c8c8f58db8e2214082492def527ac383970e75da4c"
  ],

  // ===== Code Coverage =====
  "coverage-gutters.showLineCoverage": true,
  "coverage-gutters.coverageBaseDir": "coverage",

  "supermaven.enableFixWithSupermaven": true,
  "supermaven.enable": {
    "*": false
  }
}