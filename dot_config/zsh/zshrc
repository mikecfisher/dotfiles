# Organization:
#   1. Zinit plugin manager setup
#   2. Completion system configuration
#   3. Shell plugins and prompt
#   4. Aliases
#   5. Environment variables
#   6. Custom functions and lazy-loading mechanisms
#   7. PATH configuration
#   8. History settings
#   9. Autocompletions
#  11. Additional environment loaders


export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-$HOME/.config}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-$HOME/.local/share}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-$HOME/.cache}"

export ANTHROPIC_API_KEY=$(security find-generic-password -a ${USER} -s "anthropic_api_key" -w 2>/dev/null)
export HASS_TOKEN=$(security find-generic-password -a ${USER} -s "homeassistant_token_api_key" -w 2>/dev/null)
export OPENAI_API_KEY=$(security find-generic-password -a ${USER} -s "openai_api_key" -w 2>/dev/null)


### Zinit initialization - moved to top
# This ensures Zinit is installed before attempting to use it
if [[ ! -f "$XDG_DATA_HOME/zinit/zinit.git/zinit.zsh" ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})â€¦%f"
    command mkdir -p "$XDG_DATA_HOME/zinit" && command chmod g-rwX "$XDG_DATA_HOME/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$XDG_DATA_HOME/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi


# Load Zinit and set up autocompletion for it
source "$XDG_DATA_HOME/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Ensure Zinit completions directory exists
[[ ! -d ~/.cache/zinit/completions ]] && mkdir -p ~/.cache/zinit/completions

# fnm - faster node version manager written in Rust
FNM_PATH="/Users/mike/.local/share/fnm"
if [ -d "$FNM_PATH" ]; then
  export PATH="/Users/mike/.local/share/fnm:$PATH"
  eval "`fnm env`"
fi

eval "$(fnm env --use-on-cd --shell zsh)"


# Load essential Zinit annexes - these extend Zinit's functionality
# Annexes add features like binary downloading, monitoring, etc.
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust
### End of Zinit's initialization

# ===== COMPLETION SYSTEM SETUP =====
# Add Deno completions to search path
if [[ ":$FPATH:" != *":/Users/mike/completions:"* ]]; then export FPATH="/Users/mike/completions:$FPATH"; fi

# Add custom completions directory to fpath
fpath=("${XDG_CONFIG_HOME:-$HOME/.config}/zsh/completions" $fpath)

# Initialize Zsh's completion system
autoload -Uz compinit
compinit

# ===== SHELL PLUGINS AND PROMPT =====
# Initialize Starship prompt - a fast, customizable cross-shell prompt
# This replaces Powerlevel10k and is configured in ~/.config/starship.toml
eval "$(starship init zsh)"

# Reload Starship prompt when config file changes
function starship_reload() {
  # Check if config file changed
  local config_file="$HOME/.config/starship.toml"
  if [[ -n "$STARSHIP_CONFIG" ]]; then
    config_file="$STARSHIP_CONFIG"
  fi

  # Use fswatch to monitor changes
  if ! command -v fswatch >/dev/null; then
    echo "Install fswatch first: brew install fswatch"
    return 1
  fi

  ( fswatch -o "$config_file" | while read; do
    exec < /dev/tty  # Reattach to terminal
    starship refresh
  done ) &>/dev/null &
}

# Load essential Zsh plugins
# zsh-autosuggestions: Suggests commands as you type based on history
zinit light zsh-users/zsh-autosuggestions

# zsh-history-substring-search: Search history with up/down arrows
zinit light zsh-users/zsh-history-substring-search

# fast-syntax-highlighting: Syntax highlighting for the shell
zinit light zdharma-continuum/fast-syntax-highlighting

# Commented out additional plugins to improve startup time
# # Git tools
zinit light wfxr/forgit

# Developer tools
zinit light lukechilds/zsh-better-npm-completion
zinit light g-plane/zsh-yarn-autocompletions

# ZVM - vi mode
zinit ice depth=1
zinit light jeffreytse/zsh-vi-mode

# ===== GIT ABBREVIATIONS =====
# Install zsh-abbr plugin
zinit light olets/zsh-abbr

# System utilities
zinit light ael-code/zsh-colored-man-pages
zinit light hcgraf/zsh-sudo

# zinit snippet OMZ::plugins/dots/dots.plugin.zsh

# Keep essential OMZ plugins
zinit ice as"completion"
zinit snippet https://github.com/Homebrew/brew/blob/master/completions/zsh/_brew

# ===== ALIASES =====
# Python and development
alias python=python3
alias editor=nvim
alias venv="uv venv"                                      # Create Python virtual environments with uv
alias pipx="uv tool run"                                  # Run Python tools in isolation
alias pipi="uv tool install"                              # Install Python packages with uv
# Utility aliases
alias pwdc='pwd | tr -d "\n" | pbcopy && echo "Path copied to clipboard"'  # Copy current dir to clipboard
# Fix for expo command
alias expo='nocorrect expo'                               # Prevent zsh from trying to correct expo command
alias gcam='git commit -am'
alias grbm='git rebase $(git_default_branch)'
alias v='nvim'

# ===== ENVIRONMENT VARIABLES =====
# C/C++ compilation flags for Ruby
export LDFLAGS="-L/opt/homebrew/opt/ruby/lib"
export CPPFLAGS="-I/opt/homebrew/opt/ruby/include"

# Use full path for Homebrew Brewfile
export HOMEBREW_BREWFILE_FULL_NAME=1

# Cursor as default editor
export EDITOR="nvim"
export VISUAL="nvim"

# Android SDK configuration
export ANDROID_HOME=$HOME/Library/Android/sdk
export ANDROID_SDK_ROOT=$HOME/Library/Android/sdk

# JavaScript package managers
export BUN_INSTALL="$HOME/.bun"
export PNPM_HOME="$HOME/.local/share/pnpm"
export NODE_OPTIONS="--no-deprecation"                    # Suppress Node.js deprecation warnings

# ===== CUSTOM FUNCTIONS AND LAZY-LOADING =====
# Copy file contents to clipboard
function copyfile() {
  cat "$1" | pbcopy
  echo "Contents of $1 copied to clipboard"
}

# ==== 1PASSWORD LAZY-LOADING SYSTEM ====
# This system delays loading 1Password credentials until they're actually needed,
# which significantly improves shell startup time

# Set placeholder environment variables - these indicate the real values aren't loaded yet
export HASS_SERVER=http://homeassistant.local:8123

# ===== PATH SETUP =====
# This adds directories to the PATH in order of precedence (first has highest priority)
path=(
    # User-specific binaries and scripts
    $HOME/.local/bin
    $HOME/bin

    # Node.js and package managers
    $HOME/.nodenv/versions/18.11.0/bin
    $HOME/.yarn/bin
    $HOME/.config/yarn/global/node_modules/.bin
    $PNPM_HOME
    $BUN_INSTALL/bin

    # Ruby and RubyGems executables from Homebrew
    /opt/homebrew/opt/ruby/bin
    /opt/homebrew/lib/ruby/gems/3.0.0/bin

    # Python 3.12 system-level binaries
    /Library/Frameworks/Python.framework/Versions/3.12/bin
    # Python user-level binaries (pip installed packages)
    $HOME/Library/Python/3.12/bin

    # Android SDK tools order matters
    $ANDROID_HOME/cmdline-tools/latest/bin
    $ANDROID_HOME/emulator
    $ANDROID_HOME/platform-tools

    # LM Studio CLI
    $HOME/.lmstudio/bin

    # Existing system PATH
    $path
)
typeset -U path  # Remove duplicates from PATH

# ===== HISTORY SETTINGS =====
HISTFILE="${XDG_DATA_HOME:-$HOME/.local/share}/zsh/history"  # XDG-compliant
HISTSIZE=10000                  # Number of commands to keep in memory
SAVEHIST=10000                  # Number of commands to save to disk
setopt SHARE_HISTORY            # Share history between all sessions
setopt HIST_IGNORE_ALL_DUPS     # Don't record duplicated commands

# ===== ZSH OPTIONS =====
# Allow changing directory without typing 'cd'
setopt AUTO_CD

# ===== AUTOCOMPLETIONS AND TOOL INITIALIZATION =====
# EAS CLI (Expo Application Services) autocompletion
EAS_AC_ZSH_SETUP_PATH=/Users/mike/Library/Caches/eas-cli/autocomplete/zsh_setup && test -f $EAS_AC_ZSH_SETUP_PATH && source $EAS_AC_ZSH_SETUP_PATH;

# Bun JavaScript runtime autocompletion
[ -s "/Users/mike/.bun/_bun" ] && source "/Users/mike/.bun/_bun"

# Zoxide intelligent directory jumper (faster alternative to cd)
eval "$(zoxide init --cmd cd zsh)"

# 1Password CLI autocompletion
eval "$(op completion zsh)"; compdef _op op

# FZF fuzzy finder key bindings and completion
source <(fzf --zsh)

# ===== ADDITIONAL ENVIRONMENTS =====
# Deno JavaScript/TypeScript runtime environment
. "/Users/mike/.deno/env"

# === End of zshrc ===
#compdef gt
###-begin-gt-completions-###
#
# yargs command completion script
#
# Installation: gt completion >> ~/.zshrc
#    or gt completion >> ~/.zprofile on OSX.
#
_gt_yargs_completions()
{
  local reply
  local si=$IFS
  IFS=$'
' reply=($(COMP_CWORD="$((CURRENT-1))" COMP_LINE="$BUFFER" COMP_POINT="$CURSOR" gt --get-yargs-completions "${words[@]}"))
  IFS=$si
  _describe 'values' reply
}
compdef _gt_yargs_completions gt
###-end-gt-completions-###

